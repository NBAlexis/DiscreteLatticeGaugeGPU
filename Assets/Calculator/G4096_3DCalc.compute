// Each #kernel tells which function to compile; you can have many kernels

//===========================================================================
// IO Data
//===========================================================================
RWStructuredBuffer<uint> IntDataBuffer;
RWStructuredBuffer<float> FloatDataBuffer;

//=========================
//RInt textures
RWTexture2D<int2> Configuration;

//Display texture
RWTexture2D<float4> Display;

//m+n-1 x m+n-1
RWTexture2D<int> MT;
//gx1
RWTexture2D<int> IG;

//=========================
//RFloat textures

//m x 1
RWTexture2D<float> EI;

//=========================
//Values, Note, iM + iN - 1 < 4096
//They are readonly!
uint iM;
uint iN;
uint iIG;
uint iSiteShift;
uint iIteration;
float fRandomSeed;
float fBetaX;
float fBetaT;
uint iLatticeStartX;
uint iLatticeStartY;
uint iPlaqNumber;

//Variables
RWTexture2D<float2> EnergyTable;

#define fEnergyDenominator (WorkingFloatDataBuffer[0])
#define fEnergyNumerator (WorkingFloatDataBuffer[1])

RWStructuredBuffer<float> WorkingFloatDataBuffer;

#define fsx (WorkingIntDataBuffer[0])
#define fsy (WorkingIntDataBuffer[1])
#define fsz (WorkingIntDataBuffer[2])
#define fsw (WorkingIntDataBuffer[3])
#define bsx (WorkingIntDataBuffer[4])
#define bsy (WorkingIntDataBuffer[5])
#define bsz (WorkingIntDataBuffer[6])
#define bsw (WorkingIntDataBuffer[7])

#define LMask (WorkingIntDataBuffer[8])
#define mask1 (WorkingIntDataBuffer[9])
#define mask2 (WorkingIntDataBuffer[10])
#define mask3 (WorkingIntDataBuffer[11])
#define iSiteNumber (WorkingIntDataBuffer[12])
#define iGroupMask (WorkingIntDataBuffer[13])
//for 3D
#define mask4 (WorkingIntDataBuffer[14])
#define iHalfSiteShift (WorkingIntDataBuffer[15])
#define mask5 (WorkingIntDataBuffer[16])
#define mask6 (WorkingIntDataBuffer[17])


RWStructuredBuffer<uint> WorkingIntDataBuffer;

#include "CommonFunction.cginc"

//===========================================================================
// Data Input Output Kernel
//===========================================================================
#pragma kernel SetGroupTables

[numthreads(4, 4, 1)]
void SetGroupTables(uint3 id : SV_DispatchThreadID)
{
    MT[id.xy] = (id.x < iM + iN - 1 && id.y < iM + iN - 1) ? IntDataBuffer[id.x * (iM + iN - 1) + id.y] : -1;
    if (0 == id.y && id.x < iIG)
    {
        IG[id.xy] = IntDataBuffer[(iM + iN - 1) * (iM + iN - 1) + id.x];
    }

    if (0 == id.y && id.x < iM)
    {
        EI[id.xy] = FloatDataBuffer[id.x];
    }
}

#pragma kernel ReadConfiguration

[numthreads(4, 4, 1)]
void ReadConfiguration(uint3 id : SV_DispatchThreadID)
{
    IntDataBuffer[2 * ((iSiteNumber * iSiteNumber) * id.x + id.y)] = Configuration[id.xy].r;
    IntDataBuffer[2 * ((iSiteNumber * iSiteNumber) * id.x + id.y) + 1] = Configuration[id.xy].g;
}

#pragma kernel InitialWhiteConfiguration

[numthreads(4, 4, 1)]
void InitialWhiteConfiguration(uint3 id : SV_DispatchThreadID)
{
    Configuration[id.xy] = int2(0, 0);
}

#pragma kernel GetSmallData

[numthreads(1, 1, 1)]
void GetSmallData(uint3 id : SV_DispatchThreadID)
{
    IntDataBuffer[0] = iM;
    IntDataBuffer[1] = iN;
    IntDataBuffer[2] = iIG;
    IntDataBuffer[3] = iSiteShift;
    IntDataBuffer[4] = iIteration;
}

#pragma kernel ResetEnergyHistory

[numthreads(1, 1, 1)]
void ResetEnergyHistory(uint3 id : SV_DispatchThreadID)
{
    fEnergyDenominator = 0.0f;
    fEnergyNumerator = 0.0f;
}

#pragma kernel GetEnergyOut

[numthreads(1, 1, 1)]
void GetEnergyOut(uint3 id : SV_DispatchThreadID)
{
    float fTotalEnergy = 0.0f;
    float fTotalEnergyS = 0.0f;
    for (uint i = 0; i < iSiteNumber * iSiteNumber; ++i)
    {
        for (uint j = 0; j < iSiteNumber * iSiteNumber; ++j)
        {
            fTotalEnergy = fTotalEnergy + EnergyTable[uint2(i, j)].r;
        }
    }
    fTotalEnergy = fTotalEnergy / iPlaqNumber;
    fEnergyNumerator = fEnergyNumerator + fTotalEnergy;
    fEnergyDenominator = fEnergyDenominator + 1.0f;

    FloatDataBuffer[0] = fEnergyNumerator / fEnergyDenominator;
    FloatDataBuffer[1] = fTotalEnergy;
}

#pragma kernel GenerateConstants

[numthreads(1, 1, 1)]
void GenerateConstants(uint3 id : SV_DispatchThreadID)
{
    iSiteNumber = (1 << iSiteShift);

    fsx = 1 << (3 * (iSiteShift + 1));
    fsy = 1 << (2 * (iSiteShift + 1));
    fsz = 1 << (1 * (iSiteShift + 1));
    fsw = 1;
    bsx = (iSiteNumber - 1) << (3 * (iSiteShift + 1));
    bsy = (iSiteNumber - 1) << (2 * (iSiteShift + 1));
    bsz = (iSiteNumber - 1) << (1 * (iSiteShift + 1));
    bsw = (iSiteNumber - 1);

    mask1 = (iSiteNumber - 1) << iSiteShift;
    mask2 = iSiteNumber - 1;
    mask3 = (1 << (2 * iSiteShift)) - 1;

    iHalfSiteShift = iSiteShift >> 1;
    mask5 = ((1 << iHalfSiteShift) - 1);
    mask6 = mask5 << iHalfSiteShift;
    mask4 = mask5 << iSiteShift;

    iGroupMask = 4095 << 12;
}

//===========================================================================
// Display Kernel
//===========================================================================

#pragma kernel Display16

[numthreads(4, 4, 1)]
void Display16(uint3 id : SV_DispatchThreadID)
{
    float fDiv = (float)(iM - 1);
    Display[id.xy] = float4((Configuration[id.xy].r >> 12) / fDiv, (Configuration[id.xy].r & 4095) / fDiv, (Configuration[id.xy].g >> 12) / fDiv, (Configuration[id.xy].g & 4095) / (2.0f * fDiv) + 0.5f);
}

#pragma kernel Display64

[numthreads(8, 8, 1)]
void Display64(uint3 id : SV_DispatchThreadID)
{
    float fDiv = (float)(iM - 1);
    Display[id.xy] = float4((Configuration[id.xy].r >> 12) / fDiv, (Configuration[id.xy].r & 4095) / fDiv, (Configuration[id.xy].g >> 12) / fDiv, (Configuration[id.xy].g & 4095) / (2.0f * fDiv) + 0.5f);
}

#pragma kernel Display256

[numthreads(16, 16, 1)]
void Display256(uint3 id : SV_DispatchThreadID)
{
    float fDiv = (float)(iM - 1);
    Display[id.xy] = float4((Configuration[id.xy].r >> 12) / fDiv, (Configuration[id.xy].r & 4095) / fDiv, (Configuration[id.xy].g >> 12) / fDiv, (Configuration[id.xy].g & 4095) / (2.0f * fDiv) + 0.5f);
}

#pragma kernel Display1024

[numthreads(32, 32, 1)]
void Display1024(uint3 id : SV_DispatchThreadID)
{
    float fDiv = (float)(iM - 1);
    Display[id.xy] = float4((Configuration[id.xy].r >> 12) / fDiv, (Configuration[id.xy].r & 4095) / fDiv, (Configuration[id.xy].g >> 12) / fDiv, (Configuration[id.xy].g & 4095) / (2.0f * fDiv) + 0.5f);
}

//===========================================================================
// Simulate Kernel
//===========================================================================

#pragma kernel Calculate16

//for 4 x 4 x 4
[numthreads(8, 8, 1)]
void Calculate16(uint3 oid : SV_DispatchThreadID)
{
    uint2 id = uint2((oid.x + iLatticeStartX) & mask3, (oid.y + iLatticeStartY) & mask3);
    uint4 fs = uint4(fsx, fsy, fsz, fsw);
    uint4 bs = uint4(bsx, bsy, bsz, bsw);

    float fRandom = gold_noise(id.xy, fRandomSeed);
    uint iboundStart = asuint(floor(fRandom * 40));
    iboundStart = iboundStart < 0 ? 0 : iboundStart;
    iboundStart = iboundStart >= 40 ? 39 : iboundStart;

    for (uint boundDir1 = 0; boundDir1 < 3; ++boundDir1)
    {
        uint boundDir = (iboundStart + boundDir1) % 3;
        float fBeta = (0 == boundDir) ? fBetaT : fBetaX;
        //iSiteShift max is 6 (for 64 x 64 x 64 x 64 sites)
        //max is 2^(4 x 7) - 1=2^28 - 1
        uint L = id_to_Lsite_3d;

        uint3 plaq[4];
        uint icount = 0;

        for (uint plaqutte = 0; plaqutte < 3; ++plaqutte)
        {
            if (plaqutte != boundDir)
            {
                plaq[icount] = GetForwardPlaquette3D(fs, plaqutte, boundDir, L, iSiteShift, mask2, Configuration, iM, iN, mask6, mask5);
                ++icount;

                plaq[icount] = GetBackwardPlaquette3D(fs, bs, plaqutte, boundDir, L, iSiteShift, mask2, Configuration, iM, iN, mask6, mask5);
                ++icount;
            }
        }

        uint oldA = GetGvalueG4096_4D(Configuration, id.xy, boundDir);
        uint2 oldA2 = uint2(oldA, iM + iN - 2 - oldA);

        for (uint ite = 0; ite < iIteration; ++ite)
        {
            uint iGIndexbOld = 0;
            uint iGIndexbNew = 0;
            float fEISumOld = 0.0f;
            float fEISumNew = 0.0f;

            fRandom = gold_noise(id.xy, fRandom);

            int iGIndex = asuint(floor(fRandom * iIG));
            iGIndex = (iGIndex < 0) ? 0 : iGIndex;
            iGIndex = (iGIndex >= asint(iIG)) ? asint(iIG - 1) : iGIndex;
            uint gGroupIndex = IG[uint2(asuint(iGIndex), 0)];
            uint newA = MT[uint2(gGroupIndex, oldA2.x)];
            uint2 newA2 = uint2(newA, iM + iN - 2 - newA);

            //check energy
            float2 enery2 = float2(0.0f, 0.0f);
            for (uint plaqutte = 0; plaqutte < 4; ++plaqutte)
            {
                enery2 = enery2 + fBeta * CalcEnergy(plaqutte, oldA2, newA2, plaq[plaqutte], MT, EI);
            }

            fRandom = gold_noise(id.xy, fRandom);
            oldA2 = Exchange(oldA2, newA2, enery2, fRandom);
        }

        //Update Bound
        if (0 == boundDir)
        {
            Configuration[id.xy] = int2(asint((asuint(Configuration[id.xy].r) & 4095) + (oldA2.x << 12)), Configuration[id.xy].g);
        }
        else if (1 == boundDir)
        {
            Configuration[id.xy] = int2(asint((asuint(Configuration[id.xy].r) & iGroupMask) + oldA2.x), Configuration[id.xy].g);
        }
        else
        {
            Configuration[id.xy] = int2(Configuration[id.xy].r, asint((asuint(Configuration[id.xy].g) & 4095) + (oldA2.x << 12)));
        }
    }
}

#pragma kernel Calculate256

//for larger than 4 x 4 x 4
[numthreads(16, 16, 1)]
void Calculate256(uint3 oid : SV_DispatchThreadID)
{
    uint2 id = uint2((oid.x + iLatticeStartX) & mask3, (oid.y + iLatticeStartY) & mask3);
    uint4 fs = uint4(fsx, fsy, fsz, fsw);
    uint4 bs = uint4(bsx, bsy, bsz, bsw);

    float fRandom = gold_noise(id.xy, fRandomSeed);
    uint iboundStart = asuint(floor(fRandom * 40));
    iboundStart = iboundStart < 0 ? 0 : iboundStart;
    iboundStart = iboundStart >= 40 ? 39 : iboundStart;

    for (uint boundDir1 = 0; boundDir1 < 3; ++boundDir1)
    {
        uint boundDir = (iboundStart + boundDir1) % 3;
        float fBeta = (0 == boundDir) ? fBetaT : fBetaX;
        //iSiteShift max is 6 (for 64 x 64 x 64 x 64 sites)
        //max is 2^(4 x 7) - 1=2^28 - 1
        uint L = id_to_Lsite_3d;

        uint3 plaq[4];
        uint icount = 0;

        for (uint plaqutte = 0; plaqutte < 3; ++plaqutte)
        {
            if (plaqutte != boundDir)
            {
                plaq[icount] = GetForwardPlaquette3D(fs, plaqutte, boundDir, L, iSiteShift, mask2, Configuration, iM, iN, mask6, mask5);
                ++icount;

                plaq[icount] = GetBackwardPlaquette3D(fs, bs, plaqutte, boundDir, L, iSiteShift, mask2, Configuration, iM, iN, mask6, mask5);
                ++icount;
            }
        }

        uint oldA = GetGvalueG4096_4D(Configuration, id.xy, boundDir);
        uint2 oldA2 = uint2(oldA, iM + iN - 2 - oldA);

        for (uint ite = 0; ite < iIteration; ++ite)
        {
            uint iGIndexbOld = 0;
            uint iGIndexbNew = 0;
            float fEISumOld = 0.0f;
            float fEISumNew = 0.0f;

            fRandom = gold_noise(id.xy, fRandom);

            int iGIndex = asuint(floor(fRandom * iIG));
            iGIndex = (iGIndex < 0) ? 0 : iGIndex;
            iGIndex = (iGIndex >= asint(iIG)) ? asint(iIG - 1) : iGIndex;
            uint gGroupIndex = IG[uint2(asuint(iGIndex), 0)];
            uint newA = MT[uint2(gGroupIndex, oldA2.x)];
            uint2 newA2 = uint2(newA, iM + iN - 2 - newA);

            //check energy
            float2 enery2 = float2(0.0f, 0.0f);
            for (uint plaqutte = 0; plaqutte < 4; ++plaqutte)
            {
                enery2 = enery2 + fBeta * CalcEnergy(plaqutte, oldA2, newA2, plaq[plaqutte], MT, EI);
            }

            fRandom = gold_noise(id.xy, fRandom);
            oldA2 = Exchange(oldA2, newA2, enery2, fRandom);
        }

        //Update Bound
        if (0 == boundDir)
        {
            Configuration[id.xy] = int2(asint((asuint(Configuration[id.xy].r) & 4095) + (oldA2.x << 12)), Configuration[id.xy].g);
        }
        else if (1 == boundDir)
        {
            Configuration[id.xy] = int2(asint((asuint(Configuration[id.xy].r) & iGroupMask) + oldA2.x), Configuration[id.xy].g);
        }
        else
        {
            Configuration[id.xy] = int2(Configuration[id.xy].r, asint((asuint(Configuration[id.xy].g) & 4095) + (oldA2.x << 12)));
        }
    }
}

#pragma kernel CalculateEnergy16

[numthreads(8, 8, 1)]
void CalculateEnergy16(uint3 id : SV_DispatchThreadID)
{
    float fEnergy = 0.0f;
    for (uint boundDir = 0; boundDir < 3; ++boundDir)
    {
        uint4 fs = uint4(fsx, fsy, fsz, fsw);

        uint L = id_to_Lsite_3d;
        uint oldA = GetGvalueG4096_4D(Configuration, id.xy, boundDir);

        for (uint plaqutte = 0; plaqutte < 3; ++plaqutte)
        {
            if (plaqutte != boundDir)
            {
                uint3 plaq = GetForwardPlaquette3D(fs, plaqutte, boundDir, L, iSiteShift, mask2, Configuration, iM, iN, mask6, mask5);
                float fIncre = CalcEnergySingle(plaqutte, oldA, plaq, MT, EI);
                fEnergy += fIncre;
            }
        }
    }

    EnergyTable[id.xy] = float2(fEnergy, EnergyTable[id.xy].g);
}

#pragma kernel CalculateEnergy256

[numthreads(16, 16, 1)]
void CalculateEnergy256(uint3 id : SV_DispatchThreadID)
{
    float fEnergy = 0.0f;
    for (uint boundDir = 0; boundDir < 3; ++boundDir)
    {
        uint4 fs = uint4(fsx, fsy, fsz, fsw);

        uint L = id_to_Lsite_3d;
        uint oldA = GetGvalueG4096_4D(Configuration, id.xy, boundDir);

        for (uint plaqutte = 0; plaqutte < 3; ++plaqutte)
        {
            if (plaqutte != boundDir)
            {
                uint3 plaq = GetForwardPlaquette3D(fs, plaqutte, boundDir, L, iSiteShift, mask2, Configuration, iM, iN, mask6, mask5);
                float fIncre = CalcEnergySingle(plaqutte, oldA, plaq, MT, EI);
                fEnergy += fIncre;
            }
        }
    }

    EnergyTable[id.xy] = float2(fEnergy, EnergyTable[id.xy].g);
}

#pragma kernel CalculateEnergy1024

[numthreads(32, 32, 1)]
void CalculateEnergy1024(uint3 id : SV_DispatchThreadID)
{
    float fEnergy = 0.0f;
    for (uint boundDir = 0; boundDir < 3; ++boundDir)
    {
        uint4 fs = uint4(fsx, fsy, fsz, fsw);

        uint L = id_to_Lsite_3d;
        uint oldA = GetGvalueG4096_4D(Configuration, id.xy, boundDir);

        for (uint plaqutte = 0; plaqutte < 3; ++plaqutte)
        {
            if (plaqutte != boundDir)
            {
                uint3 plaq = GetForwardPlaquette3D(fs, plaqutte, boundDir, L, iSiteShift, mask2, Configuration, iM, iN, mask6, mask5);
                float fIncre = CalcEnergySingle(plaqutte, oldA, plaq, MT, EI);
                fEnergy += fIncre;
            }
        }
    }

    EnergyTable[id.xy] = float2(fEnergy, EnergyTable[id.xy].g);
}
